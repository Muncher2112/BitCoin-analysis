package tradeAnalysis;
import java.io.IOException;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
public class BuySellCount {
	public static class Map extends Mapper<LongWritable, Text, Text, IntWritable> {
		private Text timeStamp = new Text();
		private Text tradeID = new Text();
		private Text Rate = new Text();
		private Text Amount = new Text();
		private Text Address = new Text();
		private Text Type = new Text();
		private Text Time = new Text();
		private final static IntWritable one = new IntWritable(1);
		private Text word = new Text();
		public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
			String textLine = value.toString();  // TUrn the incoming line of text into a string
			System.out.println(textLine);
			StringTokenizer tokenizedLine = new StringTokenizer(textLine,"\t");
			timeStamp.set(tokenizedLine.nextToken());
			tradeID.set(tokenizedLine.nextToken());
			Rate.set(tokenizedLine.nextToken());
			Amount.set(tokenizedLine.nextToken());
			Address.set(tokenizedLine.nextToken());
			Type.set(tokenizedLine.nextToken());
			Time.set(tokenizedLine.nextToken());
			context.write(Type, one);
		}
	}
	public static class Reduce extends Reducer<Text, IntWritable, Text, IntWritable> {
		private IntWritable result = new IntWritable();
		private IntWritable val = new IntWritable();
		public void reduce(Text key, Iterable<IntWritable> values, Context context)
				throws IOException, InterruptedException {
			int sum = 0;
			for (IntWritable val : values) {
				sum += val.get();
			}
			result.set(sum);
			context.write(key, new IntWritable(sum));
		}
	}
	public static void main(String[] args) throws Exception {
		Configuration conf = new Configuration();
		Job job = new Job(conf, "wordcount");
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(IntWritable.class);
		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
		job.setJarByClass(BuySellCount.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		job.waitForCompletion(true);
	}
}
